<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="namespacehisto" kind="namespace" language="C++">
    <compoundname>histo</compoundname>
    <innerclass refid="structhisto_1_1_histo" prot="public">histo::Histo</innerclass>
    <innerclass refid="classhisto_1_1histo__error" prot="public">histo::histo_error</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__breaks__methods_1ga132dcd8240c4bb268ed00b1e4fa3ebab" prot="public" static="no" strong="no">
        <type></type>
        <name>breaks_method</name>
        <enumvalue id="group__breaks__methods_1gga132dcd8240c4bb268ed00b1e4fa3ebabae05f2a05e4a163aac88bf64dc92cb36e" prot="public">
          <name>Scott</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Scott Method </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Breaks method to optimal calculation of breaks based on input data and range. Scott = 0. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/histo.hpp" line="37" column="1" bodyfile="src/include/histo.hpp" bodystart="37" bodyend="40"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___generate_breaks_1gac6f613c7fc034ff9576ffbf746f8e67f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PRECI</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::vector&lt; PRECI &gt;</type>
        <definition>std::vector&lt;PRECI&gt; histo::GenerateBreaksFromRangeAndBins</definition>
        <argsstring>(const PRECI &amp;low, const PRECI &amp;upper, const unsigned long int &amp;bins)</argsstring>
        <name>GenerateBreaksFromRangeAndBins</name>
        <param>
          <type>const PRECI &amp;</type>
          <declname>low</declname>
        </param>
        <param>
          <type>const PRECI &amp;</type>
          <declname>upper</declname>
        </param>
        <param>
          <type>const unsigned long int &amp;</type>
          <declname>bins</declname>
        </param>
        <briefdescription>
<para>Help functions to manually creating breaks from input range (low, upper) and desired number of bins. </para>        </briefdescription>
        <detaileddescription>
<para>You can use this function to force breaks in the place you want. It is specially useful if you want to store integers. For example, image your data is unsigned, [0,...,10] You can choose breaks in a way that the middle of the bins are unsigned: GenerateBreaksFromRangeAndBins( min - 0.5, max + 0.5, max + 1) If you use PrintCenter, you will the expected histo.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PRECI</parametername>
</parameternamelist>
<parameterdescription>
<para>is the type of the breaks, should be greater or as precise as T. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>low</parametername>
</parameternamelist>
<parameterdescription>
<para>first value of breaks. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upper</parametername>
</parameternamelist>
<parameterdescription>
<para>last value of breaks. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bins</parametername>
</parameternamelist>
<parameterdescription>
<para>number of divisions.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>breaks vector with the frontier values of each bin. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/histo.hpp" line="63" column="1" bodyfile="src/include/histo.hpp" bodystart="63" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="group___generate_breaks_1gacc2263aece190147683fa46a82317afb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PRECI</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::vector&lt; PRECI &gt;</type>
        <definition>std::vector&lt;PRECI&gt; histo::GenerateBreaksFromRangeAndBins</definition>
        <argsstring>(const std::pair&lt; PRECI, PRECI &gt; &amp;range_low_upper, const unsigned long int &amp;bins)</argsstring>
        <name>GenerateBreaksFromRangeAndBins</name>
        <param>
          <type>const std::pair&lt; PRECI, PRECI &gt; &amp;</type>
          <declname>range_low_upper</declname>
        </param>
        <param>
          <type>const unsigned long int &amp;</type>
          <declname>bins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group___generate_breaks_1gac6f613c7fc034ff9576ffbf746f8e67f" kindref="member">GenerateBreaksFromRangeAndBins()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/histo.hpp" line="74" column="1" bodyfile="src/include/histo.hpp" bodystart="74" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="group___generate_breaks_1gace16ecd63ec3fcf1badf6dbd6aa0f374" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PRECI</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::vector&lt; PRECI &gt;</type>
        <definition>std::vector&lt;PRECI&gt; histo::GenerateBreaksFromRangeAndWidth</definition>
        <argsstring>(const PRECI &amp;low, const PRECI &amp;upper, const PRECI &amp;width)</argsstring>
        <name>GenerateBreaksFromRangeAndWidth</name>
        <param>
          <type>const PRECI &amp;</type>
          <declname>low</declname>
        </param>
        <param>
          <type>const PRECI &amp;</type>
          <declname>upper</declname>
        </param>
        <param>
          <type>const PRECI &amp;</type>
          <declname>width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>breaks with a fixed width covering [low, upper + width] range</para><para>Note that breaks.back() can be greater than upper. upper &lt;= breaks.back() &lt; upper + width <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PRECI</parametername>
</parameternamelist>
<parameterdescription>
<para>precision for breaks. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>low</parametername>
</parameternamelist>
<parameterdescription>
<para>lower range: breaks[0] = low </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upper</parametername>
</parameternamelist>
<parameterdescription>
<para>upper range: upper &lt;= breaks.back() &lt; upper + width </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>between breaks <ndash/>fixed<ndash/>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>breaks with a fixed width covering [low, upper + width] range </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/histo.hpp" line="95" column="1" bodyfile="src/include/histo.hpp" bodystart="95" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="group___generate_breaks_1gad2a12e8a018170cb031a5f12b56e6beb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PRECI</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::vector&lt; PRECI &gt;</type>
        <definition>std::vector&lt;PRECI&gt; histo::GenerateBreaksFromRangeAndWidth</definition>
        <argsstring>(const std::pair&lt; PRECI, PRECI &gt; &amp;range_low_upper, const PRECI &amp;width)</argsstring>
        <name>GenerateBreaksFromRangeAndWidth</name>
        <param>
          <type>const std::pair&lt; PRECI, PRECI &gt; &amp;</type>
          <declname>range_low_upper</declname>
        </param>
        <param>
          <type>const PRECI &amp;</type>
          <declname>width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group___generate_breaks_1gace16ecd63ec3fcf1badf6dbd6aa0f374" kindref="member">GenerateBreaksFromRangeAndWidth()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/histo.hpp" line="109" column="1" bodyfile="src/include/histo.hpp" bodystart="109" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="namespacehisto_1aacd741c87edf32bcefe2431641ffcafd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TData</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>TData</type>
        <definition>TData histo::variance_welford</definition>
        <argsstring>(const Container &amp;xs)</argsstring>
        <name>variance_welford</name>
        <param>
          <type>const Container &amp;</type>
          <declname>xs</declname>
        </param>
        <briefdescription>
<para>Variance calculation from Container with data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TData</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Container</parametername>
</parameternamelist>
<parameterdescription>
<para>std:: type containing data (vector, array,...) </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xs</parametername>
</parameternamelist>
<parameterdescription>
<para>The container.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Variance of type TData </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/histo.hpp" line="134" column="1" bodyfile="src/include/histo.hpp" bodystart="134" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="namespacehisto_1a613305b715d9b5a7c53bde8ded34b995" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TData</type>
          </param>
          <param>
            <type>unsigned int</type>
            <declname>N</declname>
            <defname>N</defname>
            <defval>1</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool histo::isequalthan</definition>
        <argsstring>(const TData &amp;v1, const TData &amp;v2)</argsstring>
        <name>isequalthan</name>
        <param>
          <type>const TData &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const TData &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Precise comparison: equal than. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para>type TData, variable 1 to compare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para>type TData, variable 2 to compare </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/histo.hpp" line="153" column="1" bodyfile="src/include/histo.hpp" bodystart="153" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="namespacehisto_1ae92c03faf593b0ff7ed5c29a204fda53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PRECI</type>
            <defval>double</defval>
          </param>
          <param>
            <type>typename PRECI_INTEGER</type>
            <defval>unsigned long int</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structhisto_1_1_histo" kindref="compound">Histo</ref>&lt; PRECI, PRECI &gt;</type>
        <definition>Histo&lt;PRECI, PRECI&gt; histo::NormalizeByArea</definition>
        <argsstring>(const Histo&lt; PRECI, PRECI_INTEGER &gt; &amp;input_histo)</argsstring>
        <name>NormalizeByArea</name>
        <param>
          <type>const <ref refid="structhisto_1_1_histo" kindref="compound">Histo</ref>&lt; PRECI, PRECI_INTEGER &gt; &amp;</type>
          <declname>input_histo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Normalize the histogram by area. Useful for probability density functions. The output histogram has counts with PRECI, instead of PRECI_INTEGER.</para><para>Implemented using: <ulink url="https://stackoverflow.com/questions/5320677/how-to-normalize-a-histogram-in-matlab">https://stackoverflow.com/questions/5320677/how-to-normalize-a-histogram-in-matlab</ulink></para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PRECI</parametername>
</parameternamelist>
<parameterdescription>
<para>see histo </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PRECI_INTEGER</parametername>
</parameternamelist>
<parameterdescription>
<para>see histo </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_histo</parametername>
</parameternamelist>
<parameterdescription>
<para>input histogram to normalize.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>histogram normalized with float counts. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/histo.hpp" line="562" column="1" bodyfile="src/include/histo.hpp" bodystart="562" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="namespacehisto_1a4d51058aed513c8dba8aa0de051e5a3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename THisto</type>
          </param>
        </templateparamlist>
        <type>vtkSmartPointer&lt; vtkChartXY &gt;</type>
        <definition>vtkSmartPointer&lt;vtkChartXY&gt; histo::chart_from_histogram</definition>
        <argsstring>(const THisto &amp;input_histo, vtkIdType chart_type=vtkChart::LINE)</argsstring>
        <name>chart_from_histogram</name>
        <param>
          <type>const THisto &amp;</type>
          <declname>input_histo</declname>
        </param>
        <param>
          <type>vtkIdType</type>
          <declname>chart_type</declname>
          <defval>vtkChart::LINE</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/visualize_histo.hpp" line="25" column="1" bodyfile="src/include/visualize_histo.hpp" bodystart="25" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespacehisto_1a5342d3dc614b6be561dc5b8e6384f445" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename THisto</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void histo::visualize_histo</definition>
        <argsstring>(const THisto &amp;input_histo, vtkIdType chart_type=vtkChart::LINE, size_t size_x=640, size_t size_y=480)</argsstring>
        <name>visualize_histo</name>
        <param>
          <type>const THisto &amp;</type>
          <declname>input_histo</declname>
        </param>
        <param>
          <type>vtkIdType</type>
          <declname>chart_type</declname>
          <defval>vtkChart::LINE</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>size_x</declname>
          <defval>640</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>size_y</declname>
          <defval>480</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Visualize histogram using VTK chart.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>histo </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/visualize_histo.hpp" line="64" column="1" bodyfile="src/include/visualize_histo.hpp" bodystart="64" bodyend="77"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>histo namespace in histo.h </para>    </detaileddescription>
    <location file="src/include/histo.hpp" line="31" column="1"/>
  </compounddef>
</doxygen>
