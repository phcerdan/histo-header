<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="structhisto_1_1_histo" kind="struct" prot="public">
    <compoundname>histo::Histo</compoundname>
    <includes refid="histo-header_8h" local="no">histo-header.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>typename PRECI</type>
        <defval>double</defval>
      </param>
      <param>
        <type>typename PRECI_INTEGER</type>
        <defval>unsigned long int</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structhisto_1_1_histo_1aae8bee662fbf5b3f00e2b5bc8e304036" prot="public" static="no" mutable="no">
        <type>std::pair&lt; T, T &gt;</type>
        <definition>std::pair&lt;T,T&gt; histo::Histo&lt; T, PRECI, PRECI_INTEGER &gt;::range</definition>
        <argsstring></argsstring>
        <name>range</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Low and upper limit for breaks. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/phc/repository_local/histo-header/src/histo-header.h" line="129" bodyfile="/home/phc/repository_local/histo-header/src/histo-header.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhisto_1_1_histo_1a742cff9dfd900b400959621fa72eb0bb" prot="public" static="no" mutable="no">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; histo::Histo&lt; T, PRECI, PRECI_INTEGER &gt;::breaks</definition>
        <argsstring></argsstring>
        <name>breaks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Value of the breaks between bins, [low,...,upper]. size.breaks = size.counts + 1. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/phc/repository_local/histo-header/src/histo-header.h" line="132" bodyfile="/home/phc/repository_local/histo-header/src/histo-header.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhisto_1_1_histo_1af5eab179e063fbe3769d0c9ab823fa0d" prot="public" static="no" mutable="no">
        <type>std::vector&lt; PRECI_INTEGER &gt;</type>
        <definition>std::vector&lt;PRECI_INTEGER&gt; histo::Histo&lt; T, PRECI, PRECI_INTEGER &gt;::counts</definition>
        <argsstring></argsstring>
        <name>counts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>breaks.size() int vector holding the counts for each breaks interval. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/phc/repository_local/histo-header/src/histo-header.h" line="136" bodyfile="/home/phc/repository_local/histo-header/src/histo-header.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structhisto_1_1_histo_1ae3fb763b191bb6ce8997be0b09f1f10e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>histo::Histo&lt; T, PRECI, PRECI_INTEGER &gt;::Histo</definition>
        <argsstring>()</argsstring>
        <name>Histo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/phc/repository_local/histo-header/src/histo-header.h" line="139"/>
      </memberdef>
      <memberdef kind="function" id="structhisto_1_1_histo_1a7065d3edf9a7db33a93930b5bf7ae44d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>histo::Histo&lt; T, PRECI, PRECI_INTEGER &gt;::Histo</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;data, histo::breaks_method method=Scott)</argsstring>
        <name>Histo</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="group__breaks__methods_1ga132dcd8240c4bb268ed00b1e4fa3ebab" kindref="member">histo::breaks_method</ref></type>
          <declname>method</declname>
          <defval>Scott</defval>
        </param>
        <briefdescription>
<para>Constructor that takes range as the min, and max values of data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>method</parametername>
</parameternamelist>
<parameterdescription>
<para>Method to calculate breaks from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__breaks__methods_1ga132dcd8240c4bb268ed00b1e4fa3ebab" kindref="member">histo::breaks_method</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/phc/repository_local/histo-header/src/histo-header.h" line="148" bodyfile="/home/phc/repository_local/histo-header/src/histo-header.h" bodystart="147" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="structhisto_1_1_histo_1a7d313fd5714037fe2fde6108b30db86a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>histo::Histo&lt; T, PRECI, PRECI_INTEGER &gt;::Histo</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;data, const std::pair&lt; T, T &gt; &amp;input_range, histo::breaks_method method=Scott)</argsstring>
        <name>Histo</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const std::pair&lt; T, T &gt; &amp;</type>
          <declname>input_range</declname>
        </param>
        <param>
          <type><ref refid="group__breaks__methods_1ga132dcd8240c4bb268ed00b1e4fa3ebab" kindref="member">histo::breaks_method</ref></type>
          <declname>method</declname>
          <defval>Scott</defval>
        </param>
        <briefdescription>
<para>Constructor with fixed input range. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input_range</parametername>
</parameternamelist>
<parameterdescription>
<para>low and upper value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>method</parametername>
</parameternamelist>
<parameterdescription>
<para>Method to calculate breaks from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__breaks__methods_1ga132dcd8240c4bb268ed00b1e4fa3ebab" kindref="member">histo::breaks_method</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/phc/repository_local/histo-header/src/histo-header.h" line="163" bodyfile="/home/phc/repository_local/histo-header/src/histo-header.h" bodystart="163" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="structhisto_1_1_histo_1adb33e8e9c73bde47027926f5c7315545" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>histo::Histo&lt; T, PRECI, PRECI_INTEGER &gt;::Histo</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;data, const std::vector&lt; T &gt; &amp;input_breaks)</argsstring>
        <name>Histo</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>input_breaks</declname>
        </param>
        <briefdescription>
<para>Constructor that accepts a vector of breaks. You can use. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group___generate_breaks_1ga853c19bd3a41d2c20e32828507ab04eb" kindref="member">histo::GenerateBreaksFromRangeAndBins</ref> to help you creating the vector from specific number of bins and <ref refid="structhisto_1_1_histo_1aae8bee662fbf5b3f00e2b5bc8e304036" kindref="member">range</ref>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input_breaks</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/phc/repository_local/histo-header/src/histo-header.h" line="178" bodyfile="/home/phc/repository_local/histo-header/src/histo-header.h" bodystart="178" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="structhisto_1_1_histo_1a858c655679d179ba3697a70cdbbee206" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned long int</type>
        <definition>unsigned long int histo::Histo&lt; T, PRECI, PRECI_INTEGER &gt;::IndexFromValue</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>IndexFromValue</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Return the index of. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="structhisto_1_1_histo_1af5eab179e063fbe3769d0c9ab823fa0d" kindref="member">counts</ref> associated to the input value</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Ranging from range.first to range.second </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Index of counts </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/phc/repository_local/histo-header/src/histo-header.h" line="193" bodyfile="/home/phc/repository_local/histo-header/src/histo-header.h" bodystart="193" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="structhisto_1_1_histo_1a59b9327bd63469648ca27cd666adab79" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void histo::Histo&lt; T, PRECI, PRECI_INTEGER &gt;::ResetCounts</definition>
        <argsstring>()</argsstring>
        <name>ResetCounts</name>
        <briefdescription>
<para>Resize counts and reset value to zero. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/phc/repository_local/histo-header/src/histo-header.h" line="209" bodyfile="/home/phc/repository_local/histo-header/src/histo-header.h" bodystart="209" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="structhisto_1_1_histo_1a24f8c6d3b739d1199674198f49aebd28" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; PRECI_INTEGER &gt; &amp;</type>
        <definition>std::vector&lt;PRECI_INTEGER&gt;&amp; histo::Histo&lt; T, PRECI, PRECI_INTEGER &gt;::FillCounts</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;data)</argsstring>
        <name>FillCounts</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Fill counts from data. Breaks must have been set-up before calling this method. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the data member </para></simplesect>
<simplesect kind="see"><para><ref refid="structhisto_1_1_histo_1af5eab179e063fbe3769d0c9ab823fa0d" kindref="member">counts</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/phc/repository_local/histo-header/src/histo-header.h" line="223" bodyfile="/home/phc/repository_local/histo-header/src/histo-header.h" bodystart="223" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="group___counts_manipulation_1ga61ba4ed541dbfedfce4c20b7895e8303" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void histo::Histo&lt; T, PRECI, PRECI_INTEGER &gt;::Increase</definition>
        <argsstring>(const unsigned long int &amp;index)</argsstring>
        <name>Increase</name>
        <param>
          <type>const unsigned long int &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Increase count by one, checking if exceeds max_integer_. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>of counts </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/phc/repository_local/histo-header/src/histo-header.h" line="235" bodyfile="/home/phc/repository_local/histo-header/src/histo-header.h" bodystart="235" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="group___counts_manipulation_1gadd9866333da884f97a91ff1bc28ee834" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void histo::Histo&lt; T, PRECI, PRECI_INTEGER &gt;::Decrease</definition>
        <argsstring>(const unsigned long int &amp;index)</argsstring>
        <name>Decrease</name>
        <param>
          <type>const unsigned long int &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Decrease count by one, checking if it goes negative. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>of counts. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/phc/repository_local/histo-header/src/histo-header.h" line="245" bodyfile="/home/phc/repository_local/histo-header/src/histo-header.h" bodystart="245" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="group___counts_manipulation_1gaae55ca251a6c64f214ce6bd0a1772d44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void histo::Histo&lt; T, PRECI, PRECI_INTEGER &gt;::SetCount</definition>
        <argsstring>(const unsigned long int &amp;index, const long double &amp;v)</argsstring>
        <name>SetCount</name>
        <param>
          <type>const unsigned long int &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const long double &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Set count value. Checks for negative or greater than max_integer_. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>of counts. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>value to set. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/phc/repository_local/histo-header/src/histo-header.h" line="256" bodyfile="/home/phc/repository_local/histo-header/src/histo-header.h" bodystart="256" bodyend="261"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structhisto_1_1_histo_1a5d18b9007600d7099525118e6dbb7050" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool histo::Histo&lt; T, PRECI, PRECI_INTEGER &gt;::CheckIfMonotonicallyIncreasing</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;input_breaks)</argsstring>
        <name>CheckIfMonotonicallyIncreasing</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>input_breaks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Max integer for the current PRECI_INTEGER type </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/phc/repository_local/histo-header/src/histo-header.h" line="269" bodyfile="/home/phc/repository_local/histo-header/src/histo-header.h" bodystart="269" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="structhisto_1_1_histo_1a9d5a8a65b7ae5b506b9d981bac09a076" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; T &gt; &amp;</type>
        <definition>std::vector&lt;T&gt;&amp; histo::Histo&lt; T, PRECI, PRECI_INTEGER &gt;::CalculateBreaks</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;data, const std::pair&lt; T, T &gt; &amp;rang, histo::breaks_method method)</argsstring>
        <name>CalculateBreaks</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const std::pair&lt; T, T &gt; &amp;</type>
          <declname>rang</declname>
        </param>
        <param>
          <type><ref refid="group__breaks__methods_1ga132dcd8240c4bb268ed00b1e4fa3ebab" kindref="member">histo::breaks_method</ref></type>
          <declname>method</declname>
        </param>
        <briefdescription>
<para>Method to wrap breaks calculation methods that take into account the input data and range to optimize breaks vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rang</parametername>
</parameternamelist>
<parameterdescription>
<para>Range of breaks vector (low, upper) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>method</parametername>
</parameternamelist>
<parameterdescription>
<para>Method to calculate breaks from <ref refid="group__breaks__methods_1ga132dcd8240c4bb268ed00b1e4fa3ebab" kindref="member">breaks_method</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to data member: breaks. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/phc/repository_local/histo-header/src/histo-header.h" line="289" bodyfile="/home/phc/repository_local/histo-header/src/histo-header.h" bodystart="289" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="structhisto_1_1_histo_1a87967485300c01adf01b9313c936a819" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool histo::Histo&lt; T, PRECI, PRECI_INTEGER &gt;::CheckBreaksAreEquidistant</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;input_breaks)</argsstring>
        <name>CheckBreaksAreEquidistant</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>input_breaks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/phc/repository_local/histo-header/src/histo-header.h" line="299" bodyfile="/home/phc/repository_local/histo-header/src/histo-header.h" bodystart="299" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="structhisto_1_1_histo_1aec7b3023731689a91aed67b4e45725b0" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool histo::Histo&lt; T, PRECI, PRECI_INTEGER &gt;::BalanceBreaksWithRange</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;input_breaks, std::pair&lt; T, T &gt; input_range)</argsstring>
        <name>BalanceBreaksWithRange</name>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>input_breaks</declname>
        </param>
        <param>
          <type>std::pair&lt; T, T &gt;</type>
          <declname>input_range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/phc/repository_local/histo-header/src/histo-header.h" line="309" bodyfile="/home/phc/repository_local/histo-header/src/histo-header.h" bodystart="309" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="structhisto_1_1_histo_1a4820a2a15fcb5b2d2e031c57d9bb2b85" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void histo::Histo&lt; T, PRECI, PRECI_INTEGER &gt;::CheckAndUpdateDiff</definition>
        <argsstring>(T &amp;diff, bool &amp;diff_isZero, const T &amp;rhs, const T &amp;lhs)</argsstring>
        <name>CheckAndUpdateDiff</name>
        <param>
          <type>T &amp;</type>
          <declname>diff</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>diff_isZero</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>lhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/phc/repository_local/histo-header/src/histo-header.h" line="360" bodyfile="/home/phc/repository_local/histo-header/src/histo-header.h" bodystart="360" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="structhisto_1_1_histo_1af6cd7072634213a849dfabf63f85d574" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void histo::Histo&lt; T, PRECI, PRECI_INTEGER &gt;::ShiftBreaks</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;input_breaks, const T &amp;d)</argsstring>
        <name>ShiftBreaks</name>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>input_breaks</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/phc/repository_local/histo-header/src/histo-header.h" line="364" bodyfile="/home/phc/repository_local/histo-header/src/histo-header.h" bodystart="364" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="structhisto_1_1_histo_1aac6662925483de617f8eedab2b0f086d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void histo::Histo&lt; T, PRECI, PRECI_INTEGER &gt;::ShrinkOrExpandBreaks</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;input_breaks, const T &amp;d)</argsstring>
        <name>ShrinkOrExpandBreaks</name>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>input_breaks</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/phc/repository_local/histo-header/src/histo-header.h" line="369" bodyfile="/home/phc/repository_local/histo-header/src/histo-header.h" bodystart="369" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="structhisto_1_1_histo_1ae0c080f5ded1c4aebb4bfe0a2cced99a" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; T &gt; &amp;</type>
        <definition>std::vector&lt;T&gt;&amp; histo::Histo&lt; T, PRECI, PRECI_INTEGER &gt;::ScottMethod</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;data, const std::pair&lt; T, T &gt; &amp;rang)</argsstring>
        <name>ScottMethod</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const std::pair&lt; T, T &gt; &amp;</type>
          <declname>rang</declname>
        </param>
        <briefdescription>
<para>Scott Method to calculate optimal breaks. Calculate variance from <ref refid="namespacehisto_1a6fdcb336cae7bfe66ad7963f3ce49c66" kindref="member">variance_welford</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rang</parametername>
</parameternamelist>
<parameterdescription>
<para>Range of breaks vector (low, upper)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to data member: breaks. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/phc/repository_local/histo-header/src/histo-header.h" line="385" bodyfile="/home/phc/repository_local/histo-header/src/histo-header.h" bodystart="385" bodyend="405"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Histogram inspired by R. Simple, no dependancies, header-only. It accepts different data values and precission. </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Input data type. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PRECI</parametername>
</parameternamelist>
<parameterdescription>
<para>It should be equal to T, except when T is int. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PRECI_INTEGER</parametername>
</parameternamelist>
<parameterdescription>
<para>int type for counts data member. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <location file="/home/phc/repository_local/histo-header/src/histo-header.h" line="125" bodyfile="/home/phc/repository_local/histo-header/src/histo-header.h" bodystart="125" bodyend="406"/>
    <listofallmembers>
      <member refid="structhisto_1_1_histo_1aec7b3023731689a91aed67b4e45725b0" prot="private" virt="non-virtual"><scope>histo::Histo</scope><name>BalanceBreaksWithRange</name></member>
      <member refid="structhisto_1_1_histo_1a742cff9dfd900b400959621fa72eb0bb" prot="public" virt="non-virtual"><scope>histo::Histo</scope><name>breaks</name></member>
      <member refid="structhisto_1_1_histo_1a9d5a8a65b7ae5b506b9d981bac09a076" prot="private" virt="non-virtual"><scope>histo::Histo</scope><name>CalculateBreaks</name></member>
      <member refid="structhisto_1_1_histo_1a4820a2a15fcb5b2d2e031c57d9bb2b85" prot="private" virt="non-virtual"><scope>histo::Histo</scope><name>CheckAndUpdateDiff</name></member>
      <member refid="structhisto_1_1_histo_1a87967485300c01adf01b9313c936a819" prot="private" virt="non-virtual"><scope>histo::Histo</scope><name>CheckBreaksAreEquidistant</name></member>
      <member refid="structhisto_1_1_histo_1a5d18b9007600d7099525118e6dbb7050" prot="private" virt="non-virtual"><scope>histo::Histo</scope><name>CheckIfMonotonicallyIncreasing</name></member>
      <member refid="structhisto_1_1_histo_1af5eab179e063fbe3769d0c9ab823fa0d" prot="public" virt="non-virtual"><scope>histo::Histo</scope><name>counts</name></member>
      <member refid="group___counts_manipulation_1gadd9866333da884f97a91ff1bc28ee834" prot="public" virt="non-virtual"><scope>histo::Histo</scope><name>Decrease</name></member>
      <member refid="structhisto_1_1_histo_1a24f8c6d3b739d1199674198f49aebd28" prot="public" virt="non-virtual"><scope>histo::Histo</scope><name>FillCounts</name></member>
      <member refid="structhisto_1_1_histo_1ae3fb763b191bb6ce8997be0b09f1f10e" prot="public" virt="non-virtual"><scope>histo::Histo</scope><name>Histo</name></member>
      <member refid="structhisto_1_1_histo_1a7065d3edf9a7db33a93930b5bf7ae44d" prot="public" virt="non-virtual"><scope>histo::Histo</scope><name>Histo</name></member>
      <member refid="structhisto_1_1_histo_1a7d313fd5714037fe2fde6108b30db86a" prot="public" virt="non-virtual"><scope>histo::Histo</scope><name>Histo</name></member>
      <member refid="structhisto_1_1_histo_1adb33e8e9c73bde47027926f5c7315545" prot="public" virt="non-virtual"><scope>histo::Histo</scope><name>Histo</name></member>
      <member refid="group___counts_manipulation_1ga61ba4ed541dbfedfce4c20b7895e8303" prot="public" virt="non-virtual"><scope>histo::Histo</scope><name>Increase</name></member>
      <member refid="structhisto_1_1_histo_1a858c655679d179ba3697a70cdbbee206" prot="public" virt="non-virtual"><scope>histo::Histo</scope><name>IndexFromValue</name></member>
      <member refid="structhisto_1_1_histo_1aae8bee662fbf5b3f00e2b5bc8e304036" prot="public" virt="non-virtual"><scope>histo::Histo</scope><name>range</name></member>
      <member refid="structhisto_1_1_histo_1a59b9327bd63469648ca27cd666adab79" prot="public" virt="non-virtual"><scope>histo::Histo</scope><name>ResetCounts</name></member>
      <member refid="structhisto_1_1_histo_1ae0c080f5ded1c4aebb4bfe0a2cced99a" prot="private" virt="non-virtual"><scope>histo::Histo</scope><name>ScottMethod</name></member>
      <member refid="group___counts_manipulation_1gaae55ca251a6c64f214ce6bd0a1772d44" prot="public" virt="non-virtual"><scope>histo::Histo</scope><name>SetCount</name></member>
      <member refid="structhisto_1_1_histo_1af6cd7072634213a849dfabf63f85d574" prot="private" virt="non-virtual"><scope>histo::Histo</scope><name>ShiftBreaks</name></member>
      <member refid="structhisto_1_1_histo_1aac6662925483de617f8eedab2b0f086d" prot="private" virt="non-virtual"><scope>histo::Histo</scope><name>ShrinkOrExpandBreaks</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
