<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="test__histo_8cpp" kind="file" language="C++">
    <compoundname>test_histo.cpp</compoundname>
    <includes local="yes">gmock/gmock.h</includes>
    <includes refid="histo_8hpp" local="yes">histo.hpp</includes>
    <includes local="no">memory</includes>
    <includes local="no">iostream</includes>
    <includes local="no">random</includes>
    <incdepgraph>
      <node id="47">
        <label>iomanip</label>
      </node>
      <node id="48">
        <label>iterator</label>
      </node>
      <node id="39">
        <label>gmock/gmock.h</label>
      </node>
      <node id="45">
        <label>cmath</label>
      </node>
      <node id="44">
        <label>stdexcept</label>
      </node>
      <node id="40">
        <label>histo.hpp</label>
        <link refid="histo_8hpp"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>src/test/test_histo.cpp</label>
        <link refid="test__histo_8cpp"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>random</label>
      </node>
      <node id="41">
        <label>vector</label>
      </node>
      <node id="43">
        <label>utility</label>
      </node>
      <node id="46">
        <label>iostream</label>
      </node>
      <node id="42">
        <label>algorithm</label>
      </node>
      <node id="49">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_histo_int_input_breaks" prot="public">HistoIntInputBreaks</innerclass>
    <innerclass refid="struct_histo_double_scott" prot="public">HistoDoubleScott</innerclass>
    <innerclass refid="struct_histo_long_double_input_range" prot="public">HistoLongDoubleInputRange</innerclass>
    <innernamespace refid="namespacetesting">testing</innernamespace>
    <innernamespace refid="namespacestd">std</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="test__histo_8cpp_1af59783448e75cddb0d724fe38601c083" prot="public" static="yes" mutable="no">
        <type>default_random_engine</type>
        <definition>default_random_engine generator</definition>
        <argsstring></argsstring>
        <name>generator</name>
        <briefdescription>
<para>LotsOfData. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test/test_histo.cpp" line="161" column="1" bodyfile="src/test/test_histo.cpp" bodystart="161" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="test__histo_8cpp_1a139d5592a714a87210b78d1f84ae882f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(HistoConstructor, withJustData)</argsstring>
        <name>TEST</name>
        <param>
          <type>HistoConstructor</type>
        </param>
        <param>
          <type>withJustData</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test/test_histo.cpp" line="10" column="1" bodyfile="src/test/test_histo.cpp" bodystart="10" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="test__histo_8cpp_1a8f488a5f60346ed6e715597e7fadb977" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(HistoConstructor, withInputRange)</argsstring>
        <name>TEST</name>
        <param>
          <type>HistoConstructor</type>
        </param>
        <param>
          <type>withInputRange</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test/test_histo.cpp" line="31" column="1" bodyfile="src/test/test_histo.cpp" bodystart="31" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="test__histo_8cpp_1a55dcdc085680405125c04707c0f39576" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(HistoConstructor, withBreaks)</argsstring>
        <name>TEST</name>
        <param>
          <type>HistoConstructor</type>
        </param>
        <param>
          <type>withBreaks</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test/test_histo.cpp" line="42" column="1" bodyfile="src/test/test_histo.cpp" bodystart="42" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="test__histo_8cpp_1acce6be1087c7063df0e7f4b689349266" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(HistoConstructor, withBreaksWithGenerator)</argsstring>
        <name>TEST</name>
        <param>
          <type>HistoConstructor</type>
        </param>
        <param>
          <type>withBreaksWithGenerator</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test/test_histo.cpp" line="57" column="1" bodyfile="src/test/test_histo.cpp" bodystart="57" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="test__histo_8cpp_1a7949ef72982519f456768a7d9d281786" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(HistoIntInputBreaks, MembersAreCorrect)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="struct_histo_int_input_breaks" kindref="compound">HistoIntInputBreaks</ref></type>
        </param>
        <param>
          <type>MembersAreCorrect</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test/test_histo.cpp" line="79" column="1" bodyfile="src/test/test_histo.cpp" bodystart="79" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="test__histo_8cpp_1a64bfd5cb2bb3b111de81c31d3350ba7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(HistoIntInputBreaks, AddMoreDataToExistingHisto)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="struct_histo_int_input_breaks" kindref="compound">HistoIntInputBreaks</ref></type>
        </param>
        <param>
          <type>AddMoreDataToExistingHisto</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test/test_histo.cpp" line="87" column="1" bodyfile="src/test/test_histo.cpp" bodystart="87" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="test__histo_8cpp_1a3c51f3b305d908fe8da3719f742867a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(HistoIntInputBreaks, ModifyCountsManuallyOrMethods)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="struct_histo_int_input_breaks" kindref="compound">HistoIntInputBreaks</ref></type>
        </param>
        <param>
          <type>ModifyCountsManuallyOrMethods</type>
        </param>
        <briefdescription>
<para>You can modify counts manually, or with methods Increase, Decrease, SetCount. The latter provides security checks, throwing exepction if exceed limits (big, or less than zero). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test/test_histo.cpp" line="97" column="1" bodyfile="src/test/test_histo.cpp" bodystart="97" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="test__histo_8cpp_1a616f6fdf43ce7c69b2ea47fd843df742" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(HistoDoubleScott, MembersAreCorrect)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="struct_histo_double_scott" kindref="compound">HistoDoubleScott</ref></type>
        </param>
        <param>
          <type>MembersAreCorrect</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test/test_histo.cpp" line="124" column="1" bodyfile="src/test/test_histo.cpp" bodystart="124" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="test__histo_8cpp_1a4b0d00016f795dc77193c30033b2768e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(HistoDoubleScott, IndexFromValueWorks)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="struct_histo_double_scott" kindref="compound">HistoDoubleScott</ref></type>
        </param>
        <param>
          <type>IndexFromValueWorks</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test/test_histo.cpp" line="135" column="1" bodyfile="src/test/test_histo.cpp" bodystart="135" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="test__histo_8cpp_1a333629c3b89171401e433d020692d9e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(HistoLongDoubleInputRange, BalanceBreaksWorks)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="struct_histo_long_double_input_range" kindref="compound">HistoLongDoubleInputRange</ref></type>
        </param>
        <param>
          <type>BalanceBreaksWorks</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test/test_histo.cpp" line="152" column="1" bodyfile="src/test/test_histo.cpp" bodystart="152" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="test__histo_8cpp_1ac0a5f6db5c42b0c67b17675a230b6121" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uniform_real_distribution&lt; double &gt;</type>
        <definition>static uniform_real_distribution&lt;double&gt; cosined</definition>
        <argsstring>(-1.0, 1.0)</argsstring>
        <name>cosined</name>
        <param>
          <type>-1.</type>
          <declname>0</declname>
        </param>
        <param>
          <type>1.</type>
          <declname>0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test/test_histo.cpp" line="162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="test__histo_8cpp_1ac709e13a07bf54f500567454a30dfe23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(HistoLotsOfDataInputRange, BalanceBreaksWorks)</argsstring>
        <name>TEST</name>
        <param>
          <type>HistoLotsOfDataInputRange</type>
        </param>
        <param>
          <type>BalanceBreaksWorks</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test/test_histo.cpp" line="164" column="1" bodyfile="src/test/test_histo.cpp" bodystart="164" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="test__histo_8cpp_1a5d1f6b599b5b995e49b21710cfad7e79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(GenerateBreaksFromRangeAndWidth, withSameUpper)</argsstring>
        <name>TEST</name>
        <param>
          <type>GenerateBreaksFromRangeAndWidth</type>
        </param>
        <param>
          <type>withSameUpper</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test/test_histo.cpp" line="176" column="1" bodyfile="src/test/test_histo.cpp" bodystart="176" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="test__histo_8cpp_1a552e84f5478c2f036fa644107cd91880" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(GenerateBreaksFromRangeAndWidth, withGreaterUpper)</argsstring>
        <name>TEST</name>
        <param>
          <type>GenerateBreaksFromRangeAndWidth</type>
        </param>
        <param>
          <type>withGreaterUpper</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test/test_histo.cpp" line="189" column="1" bodyfile="src/test/test_histo.cpp" bodystart="189" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="test__histo_8cpp_1a4585b5064c805779eae174786b9cdd49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(NormalizeByArea, withJustData)</argsstring>
        <name>TEST</name>
        <param>
          <type>NormalizeByArea</type>
        </param>
        <param>
          <type>withJustData</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test/test_histo.cpp" line="203" column="1" bodyfile="src/test/test_histo.cpp" bodystart="203" bodyend="219"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;gmock/gmock.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="histo_8hpp" kindref="compound">histo.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;random&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetesting" kindref="compound">testing</ref>;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacehisto" kindref="compound">histo</ref>;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal">TEST(HistoConstructor,<sp/>withJustData){</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>data{1.0,1.0,2.0,<sp/>3.0,<sp/>19.0};</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhisto_1_1_histo" kindref="compound">Histo&lt;double&gt;</ref><sp/>h(data);<sp/></highlight><highlight class="comment">//<sp/>Default<sp/>method<sp/>to<sp/>calculate<sp/>Breaks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>pair&lt;double,<sp/>double&gt;<sp/>expected_range<sp/>=<sp/>make_pair(1.0,<sp/>19.0);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(expected_range,<sp/>h.range);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum_counts{0};</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;c<sp/>:<sp/>h.counts){</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum_counts<sp/>+=c;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(5,<sp/>sum_counts);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>h.PrintBreaksAndCounts(std::cout);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>h.PrintCentersAndCounts(std::cout);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;breaks:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>h.PrintBreaks(std::cout);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;counts:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>h.PrintCounts(std::cout);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;centers:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>h.PrintCenters(std::cout);</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal">TEST(HistoConstructor,<sp/>withInputRange){</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>data{1.0,1.0,2.0,<sp/>3.0,<sp/>19.0};</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pair&lt;double,double&gt;<sp/>input_range<sp/>=<sp/>make_pair(-5,24.0);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhisto_1_1_histo" kindref="compound">Histo&lt;double&gt;</ref><sp/>h(data,<sp/>input_range);<sp/></highlight><highlight class="comment">//<sp/>Default<sp/>method<sp/>to<sp/>calculate<sp/>Breaks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum_counts{0};</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;c<sp/>:<sp/>h.counts){</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum_counts<sp/>+=c;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(5,<sp/>sum_counts);</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal">TEST(HistoConstructor,<sp/>withBreaks){</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>data{1.0,1.0,2.0,<sp/>3.0,<sp/>19.0};</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>br{1.0,<sp/>2.0,<sp/>15.0,<sp/>20.0};</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhisto_1_1_histo" kindref="compound">Histo&lt;double&gt;</ref><sp/>h(data,<sp/>br);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(3,<sp/>h.bins<sp/>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(2,<sp/>h.counts[0]);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(2,<sp/>h.counts[1]);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>h.counts[2]);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>data<sp/>=<sp/>{20.0,<sp/>20.0,<sp/>20.0,<sp/>20.0,<sp/>20.0};</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>h.FillCounts(data);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(6,<sp/>h.counts[2]);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>data<sp/>=<sp/>{-1.0};</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_THROW(h.FillCounts(data),<ref refid="classhisto_1_1histo__error" kindref="compound">histo_error</ref>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal">TEST(HistoConstructor,<sp/>withBreaksWithGenerator){</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>data{1.0,1.0,2.0,<sp/>3.0,<sp/>19.0};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>input_bins<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhisto_1_1_histo" kindref="compound">Histo&lt;double&gt;</ref><sp/>h(data,<sp/>histo::GenerateBreaksFromRangeAndBins&lt;double&gt;(0.0,20.0,<sp/>input_bins));</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>expected_breaks;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>expected_width<sp/>=<sp/>2.0;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i!=input_bins<sp/>+<sp/>1;<sp/>i++){</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected_breaks.push_back(expected_width<sp/>*<sp/>i);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(expected_breaks,<sp/>h.breaks);</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="struct_histo_int_input_breaks" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_histo_int_input_breaks" kindref="compound">HistoIntInputBreaks</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>::testing::Test{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>vector&lt;int&gt;<sp/>data;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structhisto_1_1_histo" kindref="compound">Histo&lt;double&gt;</ref><sp/><sp/><sp/>h;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">};</highlight></codeline>
<codeline lineno="76"><highlight class="normal">vector&lt;int&gt;<sp/>HistoIntInputBreaks::data{-2,-1,0,1,2};</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><ref refid="structhisto_1_1_histo" kindref="compound">Histo&lt;double&gt;</ref><sp/>HistoIntInputBreaks::h(data,<sp/>histo::GenerateBreaksFromRangeAndBins&lt;double&gt;(-2,2,2));</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal">TEST_F(<ref refid="struct_histo_int_input_breaks" kindref="compound">HistoIntInputBreaks</ref>,<sp/>MembersAreCorrect)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(2,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)h.bins);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>gen_breaks{-2,0,2};</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(gen_breaks<sp/>==<sp/>h.breaks)<sp/>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(std::make_pair(-2.0,2.0)<sp/>==<sp/>h.range);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(2,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)h.counts[0]);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(3,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)h.counts[1]);</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal">TEST_F(<ref refid="struct_histo_int_input_breaks" kindref="compound">HistoIntInputBreaks</ref>,<sp/>AddMoreDataToExistingHisto)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;int&gt;<sp/>extra_data{-1,-1,2};</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>h.FillCounts(extra_data);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(4,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)h.counts[0]);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(4,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)h.counts[1]);</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal">TEST_F(<ref refid="struct_histo_int_input_breaks" kindref="compound">HistoIntInputBreaks</ref>,<sp/>ModifyCountsManuallyOrMethods){</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0,<sp/>h.IndexFromValue(-2));</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>old_count<sp/>=<sp/>h.counts[0]++;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(old_count<sp/>+<sp/>1,<sp/>h.counts[0]<sp/>);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Manipulating<sp/>counts<sp/>directly<sp/>do<sp/>not<sp/>throw<sp/>expections.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_NO_THROW(h.counts[0]<sp/>=<sp/>-2);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_NO_THROW(h.counts[0]++);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decrease<sp/>throws<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>h.counts[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_THROW(h.Decrease(0),<sp/><ref refid="classhisto_1_1histo__error" kindref="compound">histo_error</ref>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Increase<sp/>throws<sp/>errors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>h.counts[0]<sp/>=<sp/>numeric_limits&lt;unsigned<sp/>long<sp/>int&gt;::max();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_THROW(h.Increase(0),<sp/><ref refid="classhisto_1_1histo__error" kindref="compound">histo_error</ref>)<sp/>&lt;&lt;<sp/>h.counts[0];</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SetCount<sp/>throws<sp/>errors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_THROW(h.SetCount(100,<sp/>2),<sp/><ref refid="classhisto_1_1histo__error" kindref="compound">histo_error</ref>)<sp/>;</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="struct_histo_double_scott" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_histo_double_scott" kindref="compound">HistoDoubleScott</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>::testing::Test{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>vector&lt;double&gt;<sp/>data;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structhisto_1_1_histo" kindref="compound">Histo&lt;double&gt;</ref><sp/><sp/><sp/>h;</highlight></codeline>
<codeline lineno="120"><highlight class="normal">};</highlight></codeline>
<codeline lineno="121"><highlight class="normal">vector&lt;double&gt;<sp/>HistoDoubleScott::data{1.0,3.0,5.0};</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><ref refid="structhisto_1_1_histo" kindref="compound">Histo&lt;double&gt;</ref><sp/>HistoDoubleScott::h(data,<sp/><ref refid="group__breaks__methods_1gga132dcd8240c4bb268ed00b1e4fa3ebabae05f2a05e4a163aac88bf64dc92cb36e" kindref="member">breaks_method::Scott</ref>);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal">TEST_F(<ref refid="struct_histo_double_scott" kindref="compound">HistoDoubleScott</ref>,<sp/>MembersAreCorrect)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FLOAT_EQ(1.0,<sp/>h.range.first);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FLOAT_EQ(5.0,<sp/>h.range.second);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>h.bins);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)h.counts.size());</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>expected_breaks{1.0,<sp/>5.0};</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(expected_breaks<sp/>==<sp/>h.breaks);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(3,<sp/>h.counts[0]);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>EXPECT_EQ(2,<sp/>h.counts[1]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal">TEST_F(<ref refid="struct_histo_double_scott" kindref="compound">HistoDoubleScott</ref>,<sp/>IndexFromValueWorks)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THROW(<sp/>h.IndexFromValue(1.0<sp/>-<sp/>numeric_limits&lt;double&gt;::epsilon()),<sp/><ref refid="classhisto_1_1histo__error" kindref="compound">histo_error</ref>);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0,<sp/>h.IndexFromValue(1.0));</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0,<sp/>h.IndexFromValue(h.breaks[1]<sp/>-<sp/>2*numeric_limits&lt;double&gt;::epsilon()))<sp/>&lt;&lt;<sp/>h.breaks[1];</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0,<sp/>h.IndexFromValue(h.breaks[1]))<sp/>&lt;&lt;<sp/>h.breaks[1];</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THROW(h.IndexFromValue(10),<sp/><ref refid="classhisto_1_1histo__error" kindref="compound">histo_error</ref>);</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145" refid="struct_histo_long_double_input_range" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_histo_long_double_input_range" kindref="compound">HistoLongDoubleInputRange</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>::testing::Test{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>vector&lt;long<sp/>double&gt;<sp/>data;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structhisto_1_1_histo" kindref="compound">Histo&lt; long double &gt;</ref><sp/><sp/><sp/>h;</highlight></codeline>
<codeline lineno="148"><highlight class="normal">};</highlight></codeline>
<codeline lineno="149"><highlight class="normal">vector&lt;<sp/>long<sp/>double&gt;<sp/>HistoLongDoubleInputRange::data{-0.8,0.1,0.9};</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><ref refid="structhisto_1_1_histo" kindref="compound">Histo&lt; long double &gt;</ref><sp/>HistoLongDoubleInputRange::h(data,std::make_pair(-1.0,<sp/>1.0),<sp/><ref refid="group__breaks__methods_1gga132dcd8240c4bb268ed00b1e4fa3ebabae05f2a05e4a163aac88bf64dc92cb36e" kindref="member">breaks_method::Scott</ref>);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal">TEST_F(<ref refid="struct_histo_long_double_input_range" kindref="compound">HistoLongDoubleInputRange</ref>,<sp/>BalanceBreaksWorks)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;long<sp/>double&gt;<sp/>balanced_breaks{-1.0,1.0};</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(balanced_breaks.size(),<sp/>h.breaks.size());</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(balanced_breaks<sp/>==<sp/>h.breaks);</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>default_random_engine<sp/>generator;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uniform_real_distribution&lt;double&gt;<sp/>cosined(-1.0,1.0);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal">TEST(HistoLotsOfDataInputRange,<sp/>BalanceBreaksWorks)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndata<sp/>=<sp/>10000;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;long<sp/>double&gt;<sp/>data(ndata);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;x<sp/>:<sp/>data){</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>cosined(generator);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pair&lt;long<sp/>double,<sp/>long<sp/>double&gt;<sp/>input_pair<sp/>=<sp/>std::make_pair(-1.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhisto_1_1_histo" kindref="compound">Histo&lt; long double, unsigned long long&gt;</ref><sp/>h(data,<sp/>input_pair,<sp/><ref refid="group__breaks__methods_1gga132dcd8240c4bb268ed00b1e4fa3ebabae05f2a05e4a163aac88bf64dc92cb36e" kindref="member">breaks_method::Scott</ref>);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FLOAT_EQ(input_pair.first<sp/>,<sp/>h.breaks[0]);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FLOAT_EQ(input_pair.second<sp/>,<sp/>h.breaks[h.bins]);</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal">TEST(<ref refid="group___generate_breaks_1gace16ecd63ec3fcf1badf6dbd6aa0f374" kindref="member">GenerateBreaksFromRangeAndWidth</ref>,<sp/>withSameUpper)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>low<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>upper<sp/>=<sp/>4.0;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>breaks<sp/>=<sp/>histo::GenerateBreaksFromRangeAndWidth&lt;double&gt;(low,<sp/>upper,<sp/>width);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(breaks.size(),<sp/>5);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FLOAT_EQ(breaks[0],<sp/>low);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FLOAT_EQ(breaks[1],<sp/>1.0);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FLOAT_EQ(breaks[2],<sp/>2.0);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FLOAT_EQ(breaks[3],<sp/>3.0);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FLOAT_EQ(breaks[4],<sp/>4.0);</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal">TEST(<ref refid="group___generate_breaks_1gace16ecd63ec3fcf1badf6dbd6aa0f374" kindref="member">GenerateBreaksFromRangeAndWidth</ref>,<sp/>withGreaterUpper)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>low<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>upper<sp/>=<sp/>4.5;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>breaks<sp/>=<sp/>histo::GenerateBreaksFromRangeAndWidth&lt;double&gt;(low,<sp/>upper,<sp/>width);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(breaks.size(),<sp/>6);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FLOAT_EQ(breaks[0],<sp/>low);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FLOAT_EQ(breaks[1],<sp/>1.0);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FLOAT_EQ(breaks[2],<sp/>2.0);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FLOAT_EQ(breaks[3],<sp/>3.0);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FLOAT_EQ(breaks[4],<sp/>4.0);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FLOAT_EQ(breaks[5],<sp/>5.0);</highlight></codeline>
<codeline lineno="201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal">TEST(<ref refid="namespacehisto_1ae92c03faf593b0ff7ed5c29a204fda53" kindref="member">NormalizeByArea</ref>,<sp/>withJustData<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>low<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>upper<sp/>=<sp/>20.0;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>breaks<sp/>=<sp/>histo::GenerateBreaksFromRangeAndWidth&lt;double&gt;(low,<sp/>upper,<sp/>width);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(breaks.size(),<sp/>21);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>data{1.0,1.0,2.0,<sp/>3.0,<sp/>19.0};</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhisto_1_1_histo" kindref="compound">Histo&lt;double&gt;</ref><sp/>h(data,<sp/>breaks);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>h_norm<sp/>=<sp/><ref refid="namespacehisto_1ae92c03faf593b0ff7ed5c29a204fda53" kindref="member">NormalizeByArea</ref>(h);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>counts<sp/>=<sp/>h_norm.counts;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum_areas<sp/>=<sp/>2*width<sp/>+<sp/>(1<sp/>*<sp/>width)<sp/>*<sp/>3;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FLOAT_EQ(counts[0],<sp/>0.0);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FLOAT_EQ(counts[1],<sp/>2.0<sp/>/<sp/>sum_areas);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FLOAT_EQ(counts[2],<sp/>1.0<sp/>/<sp/>sum_areas);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FLOAT_EQ(counts[3],<sp/>1.0<sp/>/<sp/>sum_areas);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FLOAT_EQ(counts[19],<sp/>1.0/<sp/>sum_areas);</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/test/test_histo.cpp"/>
  </compounddef>
</doxygen>
